imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

backend:
  enabled: true
  replicaCount: 1
  image:
    repository: hashicorp/http-echo
    imagePullPolicy: IfNotPresent
    tag: latest
  config:
    domain: "localhost"
    frontendHost: "http://localhost:5173"
    environment: "staging"
    projectName: "Assistant Project"
    stackName: "assistant-project"
    backendCorsOrigins: "http://localhost,http://localhost:5173,https://localhost,https://localhost:5173,http://localhost.tiangolo.com"
    secretKey: "changethis"
    elasticSearch:
      url: "http://localhost:9200"
    llm:
      model: "mistral-large-latest"
      apiKey: "changethis"
    mistralAI:
      apiKey: "changethis"
    testGenerationModel:
      name: "openai:gpt-4.1"
      key: "changethis"
  resources: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
  securityContext:
    runAsUser: 999
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  lifecycle: {}
  extraVolumes: []
  extraVolumeMounts: []
  extraEnv:
  #  N8N_DB_POSTGRESDB_NAME:
  #    valueFrom:
  #      secretKeyRef:
  #        name: db-app
  #        key: dbname

frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: hashicorp/http-echo
    pullPolicy: IfNotPresent
    tag: latest
  resources: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
  securityContext:
    runAsUser: 999
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}
  lifecycle: {}
  extraVolumes: []
  extraVolumeMounts: []
  extraEnv:
  #  N8N_DB_POSTGRESDB_NAME:
  #    valueFrom:
  #      secretKeyRef:
  #        name: db-app
  #        key: dbname

database:
  builtin: true
  image:  # section of parameters for builtin database
    repository: pgvector/pgvector
    tag: pg17
  auth:
    database: backend
    # If using an existing secret: this one will both be used by the bitnami chart managing the DB
    # and by the backend db secret
    # (https://github.com/camptocamp/charts-gs/blob/main/templates/database/database-georchestra-secret.yaml)
    # that is used by the apps
    # So you must be quite careful. It should follow the pattern from the previsouly mentioned secret
    # and tell the bitnami chart which variable provide the user and password
    # And the `database`, `username` and `ssl` params still have to be defined here and match the ones
    # provided by the secret
    # existingSecret: mysecret
#   host: backend
    password: backend
    postgresPassword: backend
    port: "5432"
    ssl: false
    username: backend
  primary:  # section of parameters for builtin database
    startupProbe:
      enabled: true
    containerSecurityContext:
      readOnlyRootFilesystem: false
    persistentVolumeClaimRetentionPolicy:
      enabled: true
    initdb:
      username: backend
      password: backend

ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Full available values: https://github.com/Arize-ai/phoenix/blob/main/helm/values.yaml
phoenix:
  enabled: true
  ingress:
    # -- Annotations to add to the ingress resource
    annotations: {}

    # -- Path prefix for the Phoenix API
    apiPath: "/"

    # -- Enable ingress controller for external access
    enabled: true

    # -- Hostname for ingress
    host: ""

    # -- Labels to add to the ingress resource
    labels: {}

    # -- Ingress path type (Prefix, Exact, or ImplementationSpecific)
    pathType: "Prefix"

    tls:
      # -- Enable TLS/HTTPS for ingress
      enabled: false
  postgresql:
    # -- Enable postgres deployment. Set to false if you have your own postgres instance (e.g., RDS, CloudSQL)
    # When disabled, you must configure database.url or database.postgres settings to point to your external database
    # IMPORTANT: Cannot be enabled simultaneously with persistence.enabled=true (for SQLite)
    # Choose one persistence strategy:
    #   - PostgreSQL: postgresql.enabled=true, persistence.enabled=false
    #   - SQLite: postgresql.enabled=false, persistence.enabled=true
    #   - External DB: postgresql.enabled=false, persistence.enabled=false, database.url configured
    enabled: false
  database:
    # -- Default retention policy for traces in days (PHOENIX_DEFAULT_RETENTION_POLICY_DAYS)
    # Set to 0 to disable automatic trace cleanup. When set to a positive value,
    # traces older than this many days will be automatically removed from the database.
    defaultRetentionPolicyDays: 30

  # Persistence configuration for Phoenix home directory
  persistence:
    # -- Enable persistent storage for Phoenix home directory
    # When enabled, Phoenix uses SQLite for local storage stored in the persistent volume
    # IMPORTANT: Cannot be enabled simultaneously with postgresql.enabled=true
    # Choose one persistence strategy:
    #   - SQLite: persistence.enabled=true, postgresql.enabled=false
    #   - PostgreSQL: persistence.enabled=false, postgresql.enabled=true
    #   - External DB: persistence.enabled=false, postgresql.enabled=false, database.url configured
    enabled: true

    # -- Kubernetes storage class for Phoenix home volume
    storageClass: ""

    # -- Access modes for the persistent volume
    accessModes:
      - ReadWriteOnce

    # -- Size of the persistent volume for Phoenix home directory
    size: "20Gi"

    # -- Annotations to add to the PVC
    annotations: {}

    # -- Labels to add to the PVC
    labels: {}
